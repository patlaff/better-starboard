name: Terraform Pipeline
run-name: Terraform ${{ inputs.tf_action }} by ${{ github.actor }}

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      TF_ACTION:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  storage-acct:
    name: "Create Storage Account if not exists"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    env:
      STATE_STG_LOC: eastus2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@main

      - name: Read backend file
        run: cat terraform/backends/${{ inputs.ENVIRONMENT }}.conf >> ${GITHUB_ENV}

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check for Storage Account
        run: az storage account show --resource-group ${{env.resource_group_name}} --name ${{env.storage_account_name}} || echo "CREATE_STG=1" >> $GITHUB_ENV

      - name: Create Storage Account
        if: ${{ env.CREATE_STG == 1 }}
        run: |
          az group create --location ${{env.STATE_STG_LOC}} --name ${{env.resource_group_name}}
          az storage account create --name ${{env.storage_account_name}} --location ${{env.STATE_STG_LOC}} --resource-group ${{env.resource_group_name}} --sku Standard_LRS
          az storage container create --name ${{env.container_name}} --account-name ${{env.storage_account_name}}
  
  
  terraform:
    name: "Terraform Build"
    needs: [storage-acct]
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    
    # outputs: 
    #   CONN_STRING: ${{ steps.outputs.outputs.CONN_STRING }}
    
    env:
      WORKING_DIR: terraform
      ARM_USE_OIDC: true
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VERSION: 1.3.7

    steps:
      - name: Checkout Repository
        uses: actions/checkout@main

      - name: Read backend file
        working-directory: ${{ env.WORKING_DIR }}
        run: cat backends/${{ inputs.ENVIRONMENT }}.conf >> ${GITHUB_ENV}

      - name: Commit TF Vars
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "TF_VAR_rg_name=${{env.resource_group_name}}" >> ${GITHUB_ENV}

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init -backend-config=backends/${{ inputs.ENVIRONMENT }}.conf

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan Apply Key Vault
        id: plan-apply-kv
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.TF_ACTION == 'plan'
        run: terraform plan -var="image_tag=${{ inputs.DOCKER_TAGS }}" -var-file=vars/${{ inputs.ENVIRONMENT }}.tfvars -target="azurerm_key_vault.this" -target="azurerm_role_assignment.TF_KV_Secrets_Reader"
      
      # - name: Terraform Plan Apply
      #   id: plan-apply-rest
      #   working-directory: ${{ env.WORKING_DIR }}
      #   if: inputs.TF_ACTION == 'plan'
      #   run: terraform plan -var-file=vars/${{ inputs.ENVIRONMENT }}.tfvars

      - name: Terraform Apply Key Vault
        id: apply-kv
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.TF_ACTION == 'apply'
        run: terraform apply -auto-approve -var="image_tag=${{ inputs.DOCKER_TAGS }}" -var-file=vars/${{ inputs.ENVIRONMENT }}.tfvars -target="azurerm_key_vault.this" -target="azurerm_role_assignment.TF_KV_Secrets_Reader"
      
      - name: Terraform Apply Rest
        id: apply-rest
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.TF_ACTION == 'apply'
        run: terraform apply -auto-approve -var="image_tag=${{ inputs.DOCKER_TAGS }}" -var-file=vars/${{ inputs.ENVIRONMENT }}.tfvars 

      - name: Terraform Plan Destroy
        id: plan-destroy
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.TF_ACTION == 'plan-destroy'
        run: terraform plan -destroy -var="image_tag=${{ inputs.DOCKER_TAGS }}" -var-file=vars/${{ inputs.ENVIRONMENT }}.tfvars

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ env.WORKING_DIR }}
        if: inputs.TF_ACTION == 'destroy'
        run: terraform destroy -auto-approve -var="image_tag=${{ inputs.DOCKER_TAGS }}" -var-file=vars/${{ inputs.ENVIRONMENT }}.tfvars 

      # - name: Capture Terraform Outputs
      #   id: outputs
      #   working-directory: ${{ env.WORKING_DIR }}
      #   run: |
      #     echo "SB_CONN_STRING=$(terraform output SB_CONN_STRING)" >> $GITHUB_OUTPUT
      #     echo "QUEUE_NAME=$(terraform output QUEUE_NAME)" >> $GITHUB_OUTPUT